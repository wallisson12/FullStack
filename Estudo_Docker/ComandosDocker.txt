**Comandos Basicos Do Docker**

    --> Logar no docker hub

            docker login

    --> Puxa do docker hub a imagem desejada 
            
            docker pull "Nome da imagem"

    --> Lista todas as imagens baixadas

            docker images

    --> Lista todos os containers em execucao

            docker ps

    --> Lista todos os containers em execucao e os que nao estao

            docker ps -a

    --> Executa um container passando o nome da imagem

            docker run "Nome da imagem" "Comando"

    --> Vai parar a execucao do container 

            docker stop "Nome" ou "Id"

    --> Vai comecar a execucao do container (parado)

            docker start "Nome" ou "Id"

    --> Vai pausar a execucao do container

            docker pause "Nome" ou "Id"

    --> Vai despausar o container

            docker unpause "Nome" ou "Id"

    --> Vai interagir com o container 

            docker exec -it "Nome" "Comando"

    --> Vai parar a execucao do container sem esperar os 10s

            docker stop -t=0 "Nome" ou "Id"

    --> Remove o container, (Primeiro temos que parar a  execucao)

            docker rm "Nome" ou "Id"

    --> Ja cria o container e entra nele

            docker run -it "Nome da imagem" "Comando"

    --> Executa o container e nao trava o terminal

            docker run -d "Nome da imagem" "Comando"

    --> Remove o container sem precisar parar ele

        docker rm "Nome" ou "Id" --force

    --> Habilita a porta para o host, faz o mapeamento

            docker run -d -P "Nome da Imagem" "Comando"

    --> Mostra como esta o mapeamento da porta em relacao ao host

            docker port "Id" ou "Nome"

    --> Faz o mapeamento de uma porta especifica

            docker run -d -p 8080:80 "Nome da Imagem"

    --> Finaliza todos os containers em execucao

            docker stop $(docker container ls -q)

    --> Remove todos os containers atte o que estao parados

            docker conatiner rm $(docker conatiner ls -aq)

    --> Sobe as imagens para o hub

            docker push "Nome da imagem"

    --> Remove todas as imagens

            docker rmi $(docker images ls -aq)

    --> Faz uma copia de um repositorio e coloca em outro

            docker tag "Nome antigo" "Nome"

    --> Vai detalhar o container

            docker inspect "Nome" ou "Id"

    --> Vai listar  as redes que o docker possui

            docker network ls


**Docker File**

    --> Permite voce criar imagens

    --> Vai fazer a construcao da imagem,(isso vai acontecer no diretorio atual, onde esta a aplicação e o arquivo dockerfile) 

            docker build -t "seu-usuario/seu-repositorio:tag" .


*Exemplo*

    # Usando a imagem base do Node.js
    FROM node:14

    # Definindo o diretório de trabalho padrao, onde as acoes vao acontecer
    WORKDIR /app

    # Copiando o arquivo package.json e instalando dependências
    COPY package*.json ./

    RUN npm install

    # Copiando o restante dos arquivos do host para a imagem
    COPY . .

    # Expondo a porta da aplicação onde esta sendo rodada
    EXPOSE 3000

    # Comando para rodar a aplicação
    CMD ["npm", "start"]

**Volume**

    --> Eh uma area gerenciada pelo docker no filesystem

    --> Cria o volume

            docker volume create "Nome"

    --> Lista todos os volumes

            docker volume ls 

**Docker Compose**

    --> Eh uma ferramenta de coordenacao de conatiners (.yml)
    --> Para nao ficar dando varios comandos

    --> No mesmo diretorio, ele faz a execucao do arquivo

            docker-compose up

    --> Para parar

            docker-compose down

*Exemplo*

    # Especifica a versão do Docker Compose
    version: '3'  

    services:
    web:  # Nome do serviço para o servidor web Nginx
        image: nginx:latest  # Usando a imagem oficial do Nginx
        ports:
        - "8080:80"  # Mapear porta 8080 no host para 80 no container
        volumes:
        - ./app:/usr/share/nginx/html  # Sincroniza a pasta local `app` com o diretório do Nginx no container
        depends_on:
        - db  # O serviço `web` depende do `db` (MySQL)

    db:  # Serviço de banco de dados MySQL
        image: mysql:5.7  # Usando a imagem oficial do MySQL versão 5.7
        environment:  # Variáveis de ambiente para configuração do MySQL
        MYSQL_ROOT_PASSWORD: rootpassword  # Senha do usuário root
        MYSQL_DATABASE: meu_banco  # Nome do banco de dados
        MYSQL_USER: usuario  # Usuário adicional
        MYSQL_PASSWORD: senha_usuario  # Senha do usuário adicional
        ports:
        - "3306:3306"  # Mapear porta 3306 no host para 3306 no container
        volumes:
        - db_data:/var/lib/mysql  # Volume para persistir dados do banco

    # Definir volumes persistentes
    volumes:
    db_data: